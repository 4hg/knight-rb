class Function
  def run = ""
  
  @fns = {
    # Nullary
    'P' => ->{ gets&.tap(&:chomp!) },
    'R' => ->{ rand(0..0xFFFFFFFF) },
    # Unary
    'Q' => ->{ exit(_1.to_i) },
    'B' => ->{ _1 },
    'C' => ->{ _1.call },
    'O' => ->{ _1[-1] == "\\" ? print(_1[0...-1]) : print(_1, $/) },
    'D' => ->{ print(_1.inspect) },
    'L' => ->{ _1.to_a.size },
    '!' => ->{ !_1.truthy? },
    '~' => ->{ -_1 },
    'A' => ->{ _1.is_a?(Integer) ? _1.chr : _1.truthy? ? _1.chr.ord : nil },
    ',' => ->{ [_1] },
    '[' => ->{ _1[0] },
    ']' => ->{ _1[1..] },
    # Binary
    '+' => ->{ _1 + _2 },
    '-' => ->{ _1 - _2 },
    '*' => ->{ _1 * _2 },
    '/' => ->{ _1 / _2 },
    '%' => ->{ _1 % _2 },
    '^' => ->{ _1 ** _2 },
    '<' => ->{ _1 < _2 },
    '>' => ->{ _1 > _2 },
    '?' => ->{ _1 == _2 },
    '&' => ->{ _1.truthy? && _2 || _1 },
    '|' => ->{ _1.truthy? && _1 || _2 },
    ';' => ->{ _1.run; _2.run },
    '=' => ->{  },
    'W' => ->{ _2.run while _1.truthy?; nil },
    # Ternary
    'I' => ->{ _1.run ? _2.run : _3.run },
    'G' => ->{ _1[_2.to_i, _3.to_i] },
    # Quaternary
    'S' => ->{ _1.set(_2.to_i, _3.to_i, _4) }
  }
end
